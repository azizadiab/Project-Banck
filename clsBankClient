#pragma once
#include <iostream>
#include <string>
#include "clsString.h"
#include "clsPerson.h"
#include <vector>
#include <fstream>
#include "clsDate.h"

using namespace std;

class clsBankClient :public clsPerson
{
private:

	enum enMode { EmptyMode = 0, UpdateMode = 1, AddNowMode = 2 };
	enMode _Mode;

	string _AccountNumber;
	string _PinCode;
	float _AccountBalance;
	bool _MarkedOfrDelete = false;
	struct stTransferRecord;

	static clsBankClient _ConvertLinetoClientObject(string Line, string Sperator = "#//#")
	{
		vector<string>vClientData;
		vClientData = clsString::Split(Line, Sperator);
		return clsBankClient(enMode::UpdateMode, vClientData[0], vClientData[1], vClientData[2],
			vClientData[3], vClientData[4], vClientData[5], stod(vClientData[6]));

	}

	static string _ConverClientObjectToLine(clsBankClient Client, string Sperator = "#//#")
	{
		string DateLine = " ";
		DateLine = Client.FirstName + Sperator;
		DateLine = DateLine + Client.LastName + Sperator;
		DateLine = DateLine + Client.Email + Sperator;
		DateLine = DateLine + Client.Phone + Sperator;
		DateLine = DateLine + Client.AccountNumber() + Sperator;
		DateLine = DateLine + Client.PinCode + Sperator;
		DateLine = DateLine + to_string(Client.AccountBalance);
		return DateLine;

	}

	static clsBankClient _GetEmptyClientObject()
	{
		return clsBankClient(enMode::EmptyMode, "", "", "", "", "", "", 0);
	}

	static vector<clsBankClient> _LoadClientsDataFromFile()
	{
		vector<clsBankClient>_vClients;
		fstream MyFile;
		MyFile.open("Clients.txt", ios::in);
		if (MyFile.is_open())
		{
			string Line;

			while (getline(MyFile, Line))
			{
				clsBankClient Client = _ConvertLinetoClientObject(Line);
				_vClients.push_back(Client);
			}
			MyFile.close();
		}
		return _vClients;

	}

	static void _SaveUpdateClient(vector<clsBankClient>vClients)
	{
		fstream MyFile;
		MyFile.open("Clients.txt", ios::out);

		string Date;
		if (MyFile.is_open())
		{
			for (clsBankClient C : vClients)
			{
				Date = _ConverClientObjectToLine(C);
				MyFile << Date << endl;
			}

			MyFile.close();

		}

	}

	static void _SaveCleintsDataToFile(vector <clsBankClient>vClients)
	{
		fstream MyFile;
		string Line;
		MyFile.open("Clients.txt", ios::out);
		if (MyFile.is_open())
		{
			for (clsBankClient& C : vClients)
			{

				if (C.MarkedForDeleted() == false)
				{
					Line = _ConverClientObjectToLine(C);
					MyFile << Line << endl;
				}
			}
			MyFile.close();

		}
	}

	void _Update()
	{

		vector<clsBankClient>_vClients;
		_vClients = _LoadClientsDataFromFile();

		for (clsBankClient& C : _vClients)
		{
			if (C.AccountNumber() == AccountNumber())
			{
				C = *this;
				break;
			}

		}
		_SaveUpdateClient(_vClients);

	}

	void _AddDataLineToFile(string stDataLine)
	{
		fstream MyFile;
		MyFile.open("Clients.txt", ios::out | ios::app);
		if (MyFile.is_open())
		{

			MyFile << stDataLine << endl;
		}
		MyFile.close();

	}

	void _AddNew()
	{
		_AddDataLineToFile(_ConverClientObjectToLine(*this));

	}

	string _PrepareTransferLogRecord(float Amount, clsBankClient DestinationClient,
		string UserName, string Seperator = "#//#")
	{
		string TransferLogRecord = " ";
		TransferLogRecord += clsDate::GetSystemDateTimeString() + Seperator;
		TransferLogRecord += AccountNumber() + Seperator;
		TransferLogRecord += DestinationClient.AccountNumber() + Seperator;
		TransferLogRecord += to_string(Amount) + Seperator;
		TransferLogRecord += to_string(AccountBalance) + Seperator;
		TransferLogRecord += to_string(DestinationClient.AccountBalance) + Seperator;
		TransferLogRecord += UserName;
		return TransferLogRecord;
	}

	void _RegisterTransferLog(float Amount, clsBankClient DestinationClient, string UserName)
	{
		string stDateLine = _PrepareTransferLogRecord(Amount, DestinationClient, UserName);
			fstream MyFile;
			MyFile.open("TransferLog.txt", ios::out | ios::app);
			if (MyFile.is_open())
			{
				MyFile << stDateLine << endl;
				MyFile.close();
			}

	}

	static stTransferRecord _ConvertTransferLogLineToRecord(string Line, string Seperator= "#//#")
	{
		vector<string>vString = clsString::Split(Line, Seperator);
		stTransferRecord Register;
		Register.DateTime = vString[0];
		Register.SourceAccountNumber = vString[1];
		Register.DestinationAccountNumber = vString[2];
		Register.Amount = stof(vString[3]);
		Register.srcBalanceAfter = stof(vString[4]);
		Register.destBalanceAfter =stof( vString[5]);
		Register.UserName = vString[6];
		return Register;
	}


public:

	clsBankClient(enMode Mode, string FirstName, string LastName, string Email, string Phone,
		string AccountNumber, string PinCode, float AccountBalance) :
		clsPerson(FirstName, LastName, Email, Phone)
	{
		_Mode = Mode;
		_AccountNumber = AccountNumber;
		_PinCode = PinCode;
		_AccountBalance = AccountBalance;

	}

	bool IsEmpty()
	{
		return(_Mode == enMode::EmptyMode);
	}

	bool MarkedForDeleted()
	{
		return _MarkedOfrDelete;
	}

	string AccountNumber()
	{
		return _AccountNumber;
	}

	void SetPinCode(string PinCode)
	{
		_PinCode = PinCode;
	}

	string GetPinCode()
	{
		return _PinCode;
	}
	__declspec(property(get = GetPinCode, put = SetPinCode)) string PinCode;

	void SetAccountBalance(float AccountBalance)
	{
		_AccountBalance = AccountBalance;
	}

	float GetAccountBalance()
	{
		return _AccountBalance;
	}
	__declspec(property(get = GetAccountBalance, put = SetAccountBalance)) float AccountBalance;

	static clsBankClient Find(string AccountNumber)
	{

		fstream MyFile;
		MyFile.open("Clients.txt", ios::in);//read Mode

		if (MyFile.is_open())
		{
			string Line;
			while (getline(MyFile, Line))
			{
				clsBankClient Client = _ConvertLinetoClientObject(Line);
				if (Client.AccountNumber() == AccountNumber)
				{
					MyFile.close();
					return Client;
				}

			}

			MyFile.close();

		}

		return _GetEmptyClientObject();
	}

	static clsBankClient Find(string AccountNumber, string PinCode)
	{
		fstream MyFile;
		MyFile.open("Clients.txt", ios::in);
		if (MyFile.is_open())
		{
			string Line;
			while (getline(MyFile, Line))
			{
				clsBankClient Client = _ConvertLinetoClientObject(Line);
				if (Client.AccountNumber() == AccountNumber && Client.PinCode == PinCode)
				{
					MyFile.close();
					return Client;
				}

			}
			MyFile.close();
		}

		return _GetEmptyClientObject();
	}

	static bool IsClientExist(string AccountNuber)
	{
		clsBankClient Client = clsBankClient::Find(AccountNuber);
		{
			return (!Client.IsEmpty());
		}

	}

	static bool IsClientExist(string AccountNuber, string PinCode)
	{
		clsBankClient Client = clsBankClient::Find(AccountNuber, PinCode);
		{
			return (!Client.IsEmpty());
		}

	}

	/*void Print()
	{
		//No UI Related code inside object.
		cout << "\nClient Card:";
		cout << "\n___________________";
		cout << "\nFirstName   : " << FirstName;
		cout << "\nLastName    : " << LastName;
		cout << "\nFull Name   : " << FullName();
		cout << "\nEmail       : " << Email;
		cout << "\nPhone       : " << Phone;
		cout << "\nAcc. Number : " << _AccountNumber;
		cout << "\nPassword    : " << _PinCode;
		cout << "\nBalance     : " << _AccountBalance;
		cout << "\n___________________\n";

	}*/

	enum enSaveRsults { saFaildEmpyedObject = 0, saSucceeded = 1, saFaildClientExsits = 3 };

	enSaveRsults Save()
	{

		switch (_Mode)
		{

		case enMode::UpdateMode:
			_Update();
			return enSaveRsults::saSucceeded;
			break;

		case enMode::EmptyMode:
			return enSaveRsults::saFaildEmpyedObject;

		case enMode::AddNowMode:
			//This will add new record to file or database
			if (clsBankClient::IsClientExist(_AccountNumber))
			{
				return enSaveRsults::saFaildClientExsits;
			}
			else
			{
				_AddNew();
				//We need to set the mode to update after add new
				_Mode = enMode::UpdateMode;
				return enSaveRsults::saSucceeded;
			}

			break;
		}

	}

	static clsBankClient GetAddNewClientObject(string AccountNumber)
	{
		return clsBankClient(enMode::AddNowMode, "", "", "", "", AccountNumber, "", 0);

	}

	bool Delete()
	{
		vector<clsBankClient>_vClient;
		_vClient = _LoadClientsDataFromFile();
		for (clsBankClient& C : _vClient)
		{
			if (C.AccountNumber() == _AccountNumber)
			{
				C._MarkedOfrDelete = true;
				break;
			}

		}
		_SaveCleintsDataToFile(_vClient);
		*this = _GetEmptyClientObject();
		return true;

	}

	static vector<clsBankClient> GetClientsList()
	{
		return _LoadClientsDataFromFile();

	}

	static double GetTotalBalance()
	{

		double TotalBalances = 0;
		vector<clsBankClient>vClients = clsBankClient::GetClientsList();
		for (clsBankClient& Client : vClients)
		{
			TotalBalances += Client.AccountBalance;

		}

		return TotalBalances;
	}

	void Depoait(double Amount)
	{
		_AccountBalance += Amount;
		Save();
	}

	bool Withdraw(double Amount)
	{

		if (Amount > _AccountBalance)
		{
			return false;
		}
		else
		{
			_AccountBalance -= Amount;
			Save();
		}
	}


	bool Transfer(float Amount, clsBankClient& DestinationClient, string UserName)
	{

		if (Amount > AccountBalance)
		{
			return false;
		}
		else
		{
			Withdraw(Amount);
			DestinationClient.Depoait(Amount);
			_RegisterTransferLog(Amount, DestinationClient, UserName);
			Save();
			return true;

		}
	}

	struct stTransferRecord
	{
		string DateTime;
		string SourceAccountNumber;
		string DestinationAccountNumber;
		float Amount;
		float srcBalanceAfter;
		float destBalanceAfter;
		string UserName;

	};


	static vector<stTransferRecord>GetTransfersLogList()
	{
		vector<stTransferRecord>vTransferLogRecord;
		fstream MyFile;
		MyFile.open("TransferLog.txt", ios::in);
		if (MyFile.is_open())
		{

			string Line;
			stTransferRecord ransferRecord;
			while (getline(MyFile, Line))
			{

				ransferRecord = _ConvertTransferLogLineToRecord(Line);
				vTransferLogRecord.push_back(ransferRecord);

			}
			MyFile.close();
		}
		return vTransferLogRecord;

	}

};
