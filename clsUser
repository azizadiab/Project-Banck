
#pragma once
#include <iostream>
#include <string>
#include "clsPerson.h"
#include "clsString.h"
#include <vector>
#include <fstream>
#include "clsDade.h"
#include "clsUtil.h"

using namespace std;



class clsUser : public clsPerson
{
private:

    enum enMode { EmptyMode = 0, UpdateMode = 1, eAddNewMode = 2 };
    enMode _Mode;
    string _UserName;
    string _Password;
    int _Permissions;
    bool _MarkForDelete = false;

    struct stLoginRegisterRecord;


    static stLoginRegisterRecord _ConvertLoginRegisterLineToRecord(string Line, string Sperator = "#//#")
    {
        vector<string>LoginRegisterDataLine;
        LoginRegisterDataLine = clsString::Split(Line, Sperator);
        stLoginRegisterRecord LoginRegisterRecord;
        LoginRegisterRecord.DateTime = LoginRegisterDataLine[0];
        LoginRegisterRecord.UserName = LoginRegisterDataLine[1];
        LoginRegisterRecord.Passwort = LoginRegisterDataLine[2];
        LoginRegisterRecord.Permissions =stoi(LoginRegisterDataLine[3]);
        return LoginRegisterRecord;
    }


    static clsUser _ConvertLinetoUserObject(string Line, string Sperator = "#//#")
    {
        vector<string>vString;
        vString = clsString::Split(Line, Sperator);
        return clsUser(enMode::UpdateMode, vString[0], vString[1], vString[2],
            vString[3], vString[4], vString[5], stoi(vString[6]));
    }

    static string _ConverUserObjectToLine(clsUser User, string Sperator = "#//#")
    {
        string UserRecord = " ";
        UserRecord += User.FirstName + Sperator;
        UserRecord += User.LastName + Sperator;
        UserRecord += User.Email + Sperator;
        UserRecord += User.Phone + Sperator;
        UserRecord += User.UserName + Sperator;
        UserRecord += User.Password + Sperator;
        UserRecord += to_string(User.Permissions);
        return UserRecord;

    }

    static clsUser _GetEmptyUserObject()
    {
        return clsUser(enMode::EmptyMode, "", "", "", "", "", "", 0);
    }

    static vector <clsUser> _LoadDataUserFromFile()
    {
        vector <clsUser> _vUsers;
        fstream MyFile;
        MyFile.open("Users.txt", ios::in);
        if (MyFile.is_open())
        {
            string Line;
            while (getline(MyFile, Line))
            {

                clsUser User = _ConvertLinetoUserObject(Line);
                _vUsers.push_back(User);

            }
            MyFile.close();
        }
        return _vUsers;
    }

    static void _SaveUsersDataToFile(vector<clsUser>vUsers)
    {
        fstream MyFile;
        MyFile.open("Users.txt", ios::out);
        string DataLine;
        if (MyFile.is_open())
        {
            for (clsUser U : vUsers)
            {
                if (U.MarkForDelete() == false)
                    DataLine = _ConverUserObjectToLine(U);
                MyFile << DataLine << endl;
            }

        }
        MyFile.close();
    }

    void _Update()
    {
        vector<clsUser>_vUsers;
        _vUsers = _LoadDataUserFromFile();
        for (clsUser& U : _vUsers)
        {
            if (U.UserName == UserName)
            {
                U = *this;
            }
        }
        _SaveUsersDataToFile(_vUsers);
    }

    void _AddNew()
    {
        _AddDataLineToFile(_ConverUserObjectToLine(*this));
    }

    void _AddDataLineToFile(string DataLine)
    {
        fstream MyFile;
        MyFile.open("Users.txt", ios::out | ios::app);
        if (MyFile.is_open())
        {

            MyFile << DataLine << endl;
            MyFile.close();
        }

    }


    string _PrepareLogInRecord(string Seperator = "#//#")
    {
        string LogInRecord = " ";
        LogInRecord += clsDate::GetSystemDateTimeString() + Seperator;
        LogInRecord += UserName + Seperator;
        LogInRecord += Password + Seperator;
        LogInRecord += to_string(Permissions);
        return LogInRecord;

    }

public:
    enum enPermissions {
        eAll = -1, pListClients = 1, pAddNewClient = 2, pDeleteClient = 4,
        pUpdateClients = 8, pFindClient = 16, pTranactions = 32, pManageUsers = 64,
        pShowLogInRegister= 128
    };

    clsUser(enMode Mode, string FirstName, string LastName, string Email, string Phone,
        string UserName, string Password, int Permissions) :
        clsPerson(FirstName, LastName, Email, Phone)
    {
        _Mode = Mode;
        _UserName = UserName;
        _Password = Password;
        _Permissions = Permissions;
    }

    bool isEmty()
    {
        return (_Mode == enMode::EmptyMode);
    }

    bool MarkForDelete()
    {
        return _MarkForDelete;
    }

    void SetUserName(string UserName)
    {
        _UserName = UserName;
    }

    string GetUserName()
    {
        return _UserName;
    }

    __declspec(property(get = GetUserName, put = SetUserName)) string UserName;

    void SetPassword(string Password)
    {
        _Password = Password;
    }

    string GetPassword()
    {
        return _Password;
    }
    __declspec(property(get = GetPassword, put = SetPassword)) string Password;

    void SetPermissions(int Permissions)
    {
        _Permissions = Permissions;
    }

    int GetPermissions()
    {
        return _Permissions;
    }
    __declspec(property(get = GetPermissions, put = SetPermissions)) int Permissions;

    static clsUser Find(string UserName)
    {

        fstream MyFile;
        MyFile.open("Users.txt", ios::in);
        if (MyFile.is_open())
        {
            string Line;
            while (getline(MyFile, Line))
            {
                clsUser User = _ConvertLinetoUserObject(Line);
                if (User.UserName == UserName)
                {
                    MyFile.close();
                    return User;
                }
            }

            MyFile.close();
        }

        return _GetEmptyUserObject();
    }

    static clsUser Find(string UserName, string Password)
    {

        fstream MyFile;
        MyFile.open("Users.txt", ios::in);
        if (MyFile.is_open())
        {
            string Line;
            while (getline(MyFile, Line))
            {
                clsUser User = _ConvertLinetoUserObject(Line);
                if (User.UserName == UserName && User.Password == Password)
                {
                    MyFile.close();
                    return User;
                }
            }

            MyFile.close();
        }

        return _GetEmptyUserObject();
    }

    enum enSaveResults { svFaildEmptyObject = 0, svSucceeded = 1, svFaildUserExists = 2 };

    enSaveResults Save()
    {
        switch (_Mode)
        {

        case enMode::EmptyMode:
            if (isEmty())
            {
                return enSaveResults::svFaildEmptyObject;

            }

        case enMode::UpdateMode:
            _Update();
            return enSaveResults::svSucceeded;
            break;

        case enMode::eAddNewMode:
            //This will add new record to file or database
            if (clsUser::IsUserExist(_UserName))
            {
                return enSaveResults::svFaildUserExists;
            }
            else
            {
                _AddNew();
                //We need to set the mode to update after add new
                _Mode = enMode::UpdateMode;
                return enSaveResults::svSucceeded;
            }
            break;
        }
    }

    static bool IsUserExist(string UserName)
    {
        clsUser User = clsUser::Find(UserName);
        {
            return (!User.isEmty());
        }

    }

    bool Delete()
    {
        vector <clsUser> _vUsers;
        _vUsers = _LoadDataUserFromFile();
        for (clsUser& U : _vUsers)
        {
            if (U.UserName == _UserName)
            {
                U._MarkForDelete = true;
                break;
            }
        }
        _SaveUsersDataToFile(_vUsers);
        *this = _GetEmptyUserObject();
        return true;
    }


    static clsUser GetAddNewUserObject(string UserName)
    {
        return clsUser(enMode::eAddNewMode, " ", " ", " ", " ", UserName, " ", 0);

    }

    static vector<clsUser> GetUsersList()
    {
        return _LoadDataUserFromFile();

    }

    bool CheckAccessPermission(enPermissions Permission)
    {
        if (this->Permissions == enPermissions::eAll)
        {
            return true;
        }

        if ((Permission & this->Permissions) == Permission)
        {
            return true;
        }
        else
            return false;

    }

    void RegisterLogins()
    {
        string stDataLine = _PrepareLogInRecord();
        fstream MyFile;
        MyFile.open("LoginRegister.txt", ios::out | ios::app);
        if (MyFile.is_open())
        {
            MyFile << stDataLine << endl;
            MyFile.close();
        }
    }

    struct stLoginRegisterRecord
    {
        string DateTime;
        string UserName;
        string Passwort;
        int Permissions;

    };

   static vector<stLoginRegisterRecord> GetLoginRegisterList()
    {
       vector<stLoginRegisterRecord> vLoginRegisterRecord;
       fstream MyFile;
       MyFile.open("LoginRegister.txt", ios::in);
       if (MyFile.is_open())
       {
           string Line;
           stLoginRegisterRecord LoginRegisterRecord;

           while (getline(MyFile, Line))
           {

                   LoginRegisterRecord = _ConvertLoginRegisterLineToRecord(Line);
                   vLoginRegisterRecord.push_back(LoginRegisterRecord);

           }
           MyFile.close();

       }
       return vLoginRegisterRecord;

   }

};

